http://en.wikipedia.org/wiki/Latent_semantic_analysis

http://en.wikipedia.org/wiki/Singular_value_decomposition

sgesvd is the lapack function for svd
not included in atlas??

get boost ublas and atlas from synaptic

ublas -> basic linear algebra functions; eg multiple matrices
atlas -> a bunch of algorithms that build on blas; eg factorise a matrix

no default binding in boost for atlas though!!
http://www.crystalclearsoftware.com/cgi-bin/boost_wiki/wiki.pl?Linear_Algebra_With_UBLAS
refers to
http://mathema.tician.de/software/boost-bindings

followed instructions and installed into
cd /data/downloads
tar zxf boost-numeric-bindings-20081116.tar.gz 
cd boost-numeric-bindings
./configure --prefix=/usr/local/boost-numeric-bindings
sudo make install

couldn't get ubuntu atlas libs to work so dloaded and built it myself

see
http://math-atlas.sourceforge.net/atlas_install/atlas_install.htm

required some screwing around...

first had to disable kernel cpu throttling
sudo /usr/bin/cpufreq-selector -g performance

for install had
- explicitly define a 32bit environment
- disabled fortran compiler
- force generation of dynamic linked libraries (.so's) first attempt with statically linked (.a's) wouldn't build in code blocks (most likely my fault)

specific install steps were...

cd /data/download
tar xjf atlas3.9.11.tar.bz2
mkdir build_dir
cd build_dir
../ATLAS/configure -b 32 --nof77 -Fa alg -fPIC 
# - b 32 for 32bit arch
# --nof77 since no fortran compiler
# -Fa alg -fPIC to allow building of dynamically link libraries
make build
cd lib && make cptshared # for c multithreaded shared libs
cd .. && sudo make install

now add to code blocks project
project -> right click -> 
	linker settings -> link libraries -> 
		add all the .so's from /usr/local/atlas/lib/
	search directories -> compiler -> 
		add path /usr/local/atlas/include 
		add path /usr/local/boost-numeric-bindings/include/boost-numeric-bindings

installed into 
/usr/local/atlas/lib/
/usr/local/atlas/include

first test
http://en.wikipedia.org/wiki/LU_decomposition

now can run a program like

#include <boost/numeric/ublas/matrix.hpp>
#include <boost/numeric/ublas/io.hpp>
#include <boost/numeric/bindings/atlas/clapack.hpp>
#include <boost/numeric/bindings/traits/ublas_matrix.hpp>

namespace ublas = boost::numeric::ublas;
namespace atlas = boost::numeric::bindings::atlas;

using namespace std;

 int main() {
    int n = 2;
    ublas::matrix<double> A(n, n);
    A(0,0)=1; A(0,1)=2;
    A(1,0)=3; A(1,1)=4;
    std::vector<int> pivot(n);
    atlas::getri (A, pivot);
    cout << A << endl;
}

but after all that it seems that atlas doesn't implement the svd rountines from lapack 
sigh :(

might try the gnu gsl http://www.gnu.org/software/gsl/

compile and make as normal

test with
#include <stdio.h>
#include <gsl/gsl_sf_bessel.h>

int
main (void) {
    double x = 5.0;
    double y = gsl_sf_bessel_J0(x);
    printf ("J0(%g) = %.18e\n", x, y);
    return 0;
}

in code blocks: right click -> project settings -> linker settings -> link library /usr/local/lib/libgsl.a
also if using the linear albegra function need to also link /usr/local/lib/libgslcblas.a

solve Ax=b

http://www.gnu.org/software/gsl/manual/html_node/LU-Decomposition.html

requires two steps
- lu decomposition

> time ./feed_to_occurrence_matrix.rb < dat/test.2500.dat > test.2500.womatrix
2m 30s

2500 entries
18609 terms, 2514 docs
46e6 entries in test.2500.womatrix!!
93m to solve


trying http://tedlab.mit.edu/~dr/svdlibc/

had to change format of code to be sparse, they presented a better format... minor change to cpp code

time cat dat/test.2.dat | ./feed_to_occurrence_matrix.rb > test.2.womatrix 
time SVDLIBC/linux/svd -o test.2 test.2.womatrix
time cpp/bin/Release/lsa < test.2.womatrix > test.2.lsa.out

entries ruby write	svd 	lsa
100			0.2s				0.3s	1.2s
200			0.4s				1.2s	6s
300			0.6s				1.5s	15s
400			0.8s				2.6s	34s
500			1.5s				5s		1m 16s


